@model HabitatForHumanity.ViewModels.UsersVM
@using HabitatForHumanity.ViewModels;

@ToolKitVM.Modal("Edit Time Card", "editModal", "editPartial")

@{
    ViewBag.Title = "Edit Volunteer";
    var editHtml = "<span class=\"glyphicon glyphicon-pencil\" aria- hidden=\"true\" title=\"Edit\"></span>";
}


@using (Html.BeginForm("EditVolunteer", "Admin"))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Edit Volunteer</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
               @Html.HiddenFor(model => model.userNumber)
        </div>

        <div class="form-group">
           @Html.LabelFor(model => model.volunteerName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.volunteerName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.volunteerName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.isAdmin, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.CheckBoxFor(model => model.isAdmin, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.hoursToDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DisplayFor(model => model.hoursToDate, new { htmlAttributes = new { @class = "form-control" } }) Hours
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.waiverStatus, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.CheckBoxFor(model => model.waiverStatus, new { htmlAttributes = new { @class = "form-control" }, disabled = "disabled" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.waiverExpiration, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DisplayFor(model => model.waiverExpiration, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

        <table class="table">
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.timeCardVM[0].volName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.timeCardVM[0].projName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.timeCardVM[0].orgName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.timeCardVM[0].inTime)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.timeCardVM[0].outTime)
                </th>
                <th>
                    Hours
                </th>
                <th></th>
            </tr>

            @foreach (var item in Model.timeCardVM)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.volName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.projName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.orgName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.inTime)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.outTime)
                    </td>
                    <td>
                        @{
                            TimeSpan span = item.outTime.Subtract(item.inTime);
                            double hours = span.Hours + span.Minutes / 60.0;
                        }
                        <div class="col-md-1 text-center"> @string.Format("{0:N2}", hours) </div>
                    </td>
                    <td>
                        @ToolKitVM.ModalButton("editButton", "editModal", editHtml, item.timeId.ToString())
                    </td>
                </tr>
            }

        </table>

<div>
    @Html.ActionLink("Back to List", "volunteers")
</div>

<script>
    //does magic! sets the html of the editing ajax links to by a glyph icon
    $("document").ready(function () {
        $(".editLink").html("<span class=\"glyphicon glyphicon-pencil\" aria- hidden=\"true\" title=\"Edit\"></span >");
    });

    $(".editButton").click(function () {
        // console.log('clicked');
        var id = $(this).attr("dataId");
        //console.log(id);
        inputData = { 'id': id }

        $.ajax(
            {
                url: '/Admin/EditTimeCard',
                type: 'GET',
                data: inputData,
                success: function (response) {
                    $("#editPartial").html(response);
                }
            }
        );

    })

    //https://stackoverflow.com/questions/31053460/how-to-make-a-net-mvc-form-inside-a-modal-using-jquery-with-validation
    //prevents the modal from automatically redirecting when the submit button is clicked
    //instead we send our post method our form data to do a validation check server side
    //and return a marked up view to the modal if it's an invalid form
    $("#editModal").on('submit', function (e) {
        e.preventDefault();
        // console.log("prevented from submitting");
        var form = $("#editTimeCardForm");
        $.ajax({
            url: '/Admin/EditTimeCard',
            type: 'POST',
            data: form.serialize(),
            success: function (partialResult) {
                //  console.log(partialResult);
                $("#editPartial").html(partialResult);
            }
        })
    });


    function refresh() {
        location.reload();
    }
</script>
